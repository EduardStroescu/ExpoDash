drop policy "Allow authenticated users ALL operations" on "public"."products";

alter table "public"."order_items" drop constraint "order_items_order_id_fkey";

alter table "public"."order_items" drop constraint "order_items_product_id_fkey";

alter table "public"."orders" drop constraint "orders_user_id_fkey";

create table "public"."order_statistics" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "total_new_orders_day" integer not null,
    "total_delivered_orders_day" integer not null,
    "total_new_orders_week" integer not null,
    "total_delivered_orders_week" integer not null,
    "total_new_orders_month" integer not null,
    "total_delivered_orders_month" integer not null,
    "total_new_orders_year" integer not null,
    "total_delivered_orders_year" integer not null
);


alter table "public"."order_statistics" enable row level security;

alter table "public"."orders" alter column "user_id" set not null;

alter table "public"."profiles" add column "stripe_customer_id" text;

CREATE UNIQUE INDEX order_statistics_pkey ON public.order_statistics USING btree (id);

alter table "public"."order_statistics" add constraint "order_statistics_pkey" PRIMARY KEY using index "order_statistics_pkey";

alter table "public"."order_items" add constraint "public_order_items_order_id_fkey" FOREIGN KEY (order_id) REFERENCES orders(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."order_items" validate constraint "public_order_items_order_id_fkey";

alter table "public"."order_items" add constraint "public_order_items_product_id_fkey" FOREIGN KEY (product_id) REFERENCES products(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."order_items" validate constraint "public_order_items_product_id_fkey";

alter table "public"."orders" add constraint "public_orders_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."orders" validate constraint "public_orders_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.update_order_statistics()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
        -- Check if there are existing rows in order_statistics
        IF EXISTS (SELECT 1 FROM order_statistics) THEN
            -- Update the latest row in order_statistics
            UPDATE order_statistics
            SET 
                total_new_orders_day = (
                    SELECT COUNT(*)
                    FROM orders
                    WHERE DATE_TRUNC('day', created_at) = DATE_TRUNC('day', NOW())
                    AND status = 'New'
                ),
                total_delivered_orders_day = (
                    SELECT COUNT(*)
                    FROM orders
                    WHERE DATE_TRUNC('day', created_at) = DATE_TRUNC('day', NOW())
                    AND status = 'Delivered'
                ),
                total_new_orders_week = (
                    SELECT COUNT(*)
                    FROM orders
                    WHERE DATE_TRUNC('week', created_at) = DATE_TRUNC('week', NOW())
                    AND status = 'New'
                ),
                total_delivered_orders_week = (
                    SELECT COUNT(*)
                    FROM orders
                    WHERE DATE_TRUNC('week', created_at) = DATE_TRUNC('week', NOW())
                    AND status = 'Delivered'
                ),
                total_new_orders_month = (
                    SELECT COUNT(*)
                    FROM orders
                    WHERE EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM NOW())
                    AND status = 'New'
                ),
                total_delivered_orders_month = (
                    SELECT COUNT(*)
                    FROM orders
                    WHERE EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM NOW())
                    AND status = 'Delivered'
                ),
                total_new_orders_year = (
                    SELECT COUNT(*)
                    FROM orders
                    WHERE EXTRACT(YEAR FROM created_at) = EXTRACT(YEAR FROM NOW())
                    AND status = 'New'
                ),
                total_delivered_orders_year = (
                    SELECT COUNT(*)
                    FROM orders
                    WHERE EXTRACT(YEAR FROM created_at) = EXTRACT(YEAR FROM NOW())
                    AND status = 'Delivered'
                )
            WHERE id = (
                SELECT id
                FROM order_statistics
                ORDER BY id DESC
                LIMIT 1
            );
        ELSE
            -- Insert a new row into order_statistics with the calculated statistics
            INSERT INTO order_statistics (
                total_new_orders_day, 
                total_delivered_orders_day, 
                total_new_orders_week, 
                total_delivered_orders_week, 
                total_new_orders_month, 
                total_delivered_orders_month, 
                total_new_orders_year, 
                total_delivered_orders_year
            )
            SELECT 
                COUNT(*) FILTER (WHERE DATE_TRUNC('day', created_at) = DATE_TRUNC('day', NOW()) AND status = 'New') AS total_new_orders_day,
                COUNT(*) FILTER (WHERE DATE_TRUNC('day', created_at) = DATE_TRUNC('day', NOW()) AND status = 'Delivered') AS total_delivered_orders_day,
                COUNT(*) FILTER (WHERE DATE_TRUNC('week', created_at) = DATE_TRUNC('week', NOW()) AND status = 'New') AS total_new_orders_week,
                COUNT(*) FILTER (WHERE DATE_TRUNC('week', created_at) = DATE_TRUNC('week', NOW()) AND status = 'Delivered') AS total_delivered_orders_week,
                COUNT(*) FILTER (WHERE EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM NOW()) AND status = 'New') AS total_new_orders_month,
                COUNT(*) FILTER (WHERE EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM NOW()) AND status = 'Delivered') AS total_delivered_orders_month,
                COUNT(*) FILTER (WHERE EXTRACT(YEAR FROM created_at) = EXTRACT(YEAR FROM NOW()) AND status = 'New') AS total_new_orders_year,
                COUNT(*) FILTER (WHERE EXTRACT(YEAR FROM created_at) = EXTRACT(YEAR FROM NOW()) AND status = 'Delivered') AS total_delivered_orders_year
            FROM 
                orders
            WHERE 
                DATE_TRUNC('day', created_at) = DATE_TRUNC('day', NOW())
                OR DATE_TRUNC('week', created_at) = DATE_TRUNC('week', NOW())
                OR EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM NOW())
                OR EXTRACT(YEAR FROM created_at) = EXTRACT(YEAR FROM NOW());
        END IF;
    
    RETURN NEW;
END;$function$
;

grant delete on table "public"."order_statistics" to "anon";

grant insert on table "public"."order_statistics" to "anon";

grant references on table "public"."order_statistics" to "anon";

grant select on table "public"."order_statistics" to "anon";

grant trigger on table "public"."order_statistics" to "anon";

grant truncate on table "public"."order_statistics" to "anon";

grant update on table "public"."order_statistics" to "anon";

grant delete on table "public"."order_statistics" to "authenticated";

grant insert on table "public"."order_statistics" to "authenticated";

grant references on table "public"."order_statistics" to "authenticated";

grant select on table "public"."order_statistics" to "authenticated";

grant trigger on table "public"."order_statistics" to "authenticated";

grant truncate on table "public"."order_statistics" to "authenticated";

grant update on table "public"."order_statistics" to "authenticated";

grant delete on table "public"."order_statistics" to "service_role";

grant insert on table "public"."order_statistics" to "service_role";

grant references on table "public"."order_statistics" to "service_role";

grant select on table "public"."order_statistics" to "service_role";

grant trigger on table "public"."order_statistics" to "service_role";

grant truncate on table "public"."order_statistics" to "service_role";

grant update on table "public"."order_statistics" to "service_role";

create policy "ALLOW ALL FOR AUTHENTICATED USERS"
on "public"."order_statistics"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Allow authenticated users to SELECT"
on "public"."products"
as permissive
for all
to authenticated
using (true)
with check (true);


CREATE TRIGGER after_order_insert AFTER INSERT ON public.orders FOR EACH STATEMENT EXECUTE FUNCTION update_order_statistics();

CREATE TRIGGER after_order_update AFTER UPDATE ON public.orders FOR EACH STATEMENT EXECUTE FUNCTION update_order_statistics();


